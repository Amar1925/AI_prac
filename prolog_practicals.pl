
% =============================================================================
% 1. Family Tree: Define family relationships
% =============================================================================

% Facts
parent(john, mary).
parent(john, david).
parent(mary, alice).
parent(david, bob).

% Rules
father(X, Y) :- parent(X, Y), male(X).
mother(X, Y) :- parent(X, Y), female(X).

male(john).
male(david).
male(bob).
female(mary).
female(alice).

% Sample query:
% ?- father(john, mary).

% =============================================================================
% 2. Concatenate two lists
% =============================================================================

conc([], L, L).
conc([H|T], L2, [H|R]) :- conc(T, L2, R).

% ?- conc([1,2], [3,4], R).

% =============================================================================
% 3. Reverse a list
% =============================================================================

reverse([], []).
reverse([H|T], R) :- reverse(T, RT), conc(RT, [H], R).

% ?- reverse([1,2,3], R).

% =============================================================================
% 4. Sum of two numbers
% =============================================================================

sum(X, Y, R) :- R is X + Y.

% ?- sum(4, 5, R).

% =============================================================================
% 5. Maximum of two numbers
% =============================================================================

max(X, Y, X) :- X >= Y.
max(X, Y, Y) :- Y > X.

% ?- max(3, 7, M).

% =============================================================================
% 6. Factorial of a number
% =============================================================================

factorial(0, 1).
factorial(N, F) :- N > 0, N1 is N-1, factorial(N1, F1), F is N * F1.

% ?- factorial(5, F).

% =============================================================================
% 7. Nth Fibonacci number
% =============================================================================

generate_fib(0, 0).
generate_fib(1, 1).
generate_fib(N, T) :- N > 1,
                      N1 is N-1,
                      N2 is N-2,
                      generate_fib(N1, T1),
                      generate_fib(N2, T2),
                      T is T1 + T2.

% ?- generate_fib(6, T).

% =============================================================================
% 8. Power of a number
% =============================================================================

power(_, 0, 1).
power(Num, Pow, Ans) :- Pow > 0, 
                        P1 is Pow - 1,
                        power(Num, P1, A1),
                        Ans is Num * A1.

% ?- power(2, 3, Ans).

% =============================================================================
% 9. Multiply two numbers
% =============================================================================

multi(N1, N2, R) :- R is N1 * N2.

% ?- multi(3, 4, R).

% =============================================================================
% 10. Check membership
% =============================================================================

memb(X, [X|_]).
memb(X, [_|T]) :- memb(X, T).

% ?- memb(3, [1,2,3,4]).

% =============================================================================
% 11. Sum of elements of a list
% =============================================================================

sumlist([], 0).
sumlist([H|T], S) :- sumlist(T, S1), S is H + S1.

% ?- sumlist([1,2,3,4], S).

% =============================================================================
% 12. Even/Odd length of a list
% =============================================================================

evenlength([]).
evenlength([_,_|T]) :- evenlength(T).

oddlength([_]).
oddlength([_,_|T]) :- oddlength(T).

% ?- evenlength([1,2,3,4]).
% ?- oddlength([1,2,3]).

% =============================================================================
% 13. Maximum in a list
% =============================================================================

maxlist([X], X).
maxlist([H|T], M) :- maxlist(T, M1), max(H, M1, M).

% ?- maxlist([1,5,3,2], M).

% =============================================================================
% 14. Insert an element at Nth position
% =============================================================================

insert_at(1, E, L, [E|L]).
insert_at(N, E, [H|T], [H|R]) :- N > 1, N1 is N-1, insert_at(N1, E, T, R).

% ?- insert_at(3, x, [a,b,c,d], R).

% =============================================================================
% 15. Delete an element from Nth position
% =============================================================================

delete_at(1, [_|T], T).
delete_at(N, [H|T], [H|R]) :- N > 1, N1 is N-1, delete_at(N1, T, R).

% ?- delete_at(2, [a,b,c,d], R).
